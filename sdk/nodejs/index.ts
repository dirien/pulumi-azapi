// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { DataPlaneResourceArgs, DataPlaneResourceState } from "./dataPlaneResource";
export type DataPlaneResource = import("./dataPlaneResource").DataPlaneResource;
export const DataPlaneResource: typeof import("./dataPlaneResource").DataPlaneResource = null as any;
utilities.lazyLoad(exports, ["DataPlaneResource"], () => require("./dataPlaneResource"));

export { GetResourceArgs, GetResourceResult, GetResourceOutputArgs } from "./getResource";
export const getResource: typeof import("./getResource").getResource = null as any;
export const getResourceOutput: typeof import("./getResource").getResourceOutput = null as any;
utilities.lazyLoad(exports, ["getResource","getResourceOutput"], () => require("./getResource"));

export { GetResourceActionArgs, GetResourceActionResult, GetResourceActionOutputArgs } from "./getResourceAction";
export const getResourceAction: typeof import("./getResourceAction").getResourceAction = null as any;
export const getResourceActionOutput: typeof import("./getResourceAction").getResourceActionOutput = null as any;
utilities.lazyLoad(exports, ["getResourceAction","getResourceActionOutput"], () => require("./getResourceAction"));

export { GetResourceIdArgs, GetResourceIdResult, GetResourceIdOutputArgs } from "./getResourceId";
export const getResourceId: typeof import("./getResourceId").getResourceId = null as any;
export const getResourceIdOutput: typeof import("./getResourceId").getResourceIdOutput = null as any;
utilities.lazyLoad(exports, ["getResourceId","getResourceIdOutput"], () => require("./getResourceId"));

export { GetResourceListArgs, GetResourceListResult, GetResourceListOutputArgs } from "./getResourceList";
export const getResourceList: typeof import("./getResourceList").getResourceList = null as any;
export const getResourceListOutput: typeof import("./getResourceList").getResourceListOutput = null as any;
utilities.lazyLoad(exports, ["getResourceList","getResourceListOutput"], () => require("./getResourceList"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ResourceArgs, ResourceState } from "./resource";
export type Resource = import("./resource").Resource;
export const Resource: typeof import("./resource").Resource = null as any;
utilities.lazyLoad(exports, ["Resource"], () => require("./resource"));

export { ResourceActionArgs, ResourceActionState } from "./resourceAction";
export type ResourceAction = import("./resourceAction").ResourceAction;
export const ResourceAction: typeof import("./resourceAction").ResourceAction = null as any;
utilities.lazyLoad(exports, ["ResourceAction"], () => require("./resourceAction"));

export { UpdateResourceArgs, UpdateResourceState } from "./updateResource";
export type UpdateResource = import("./updateResource").UpdateResource;
export const UpdateResource: typeof import("./updateResource").UpdateResource = null as any;
utilities.lazyLoad(exports, ["UpdateResource"], () => require("./updateResource"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "azapi:index/dataPlaneResource:DataPlaneResource":
                return new DataPlaneResource(name, <any>undefined, { urn })
            case "azapi:index/resource:Resource":
                return new Resource(name, <any>undefined, { urn })
            case "azapi:index/resourceAction:ResourceAction":
                return new ResourceAction(name, <any>undefined, { urn })
            case "azapi:index/updateResource:UpdateResource":
                return new UpdateResource(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("azapi", "index/dataPlaneResource", _module)
pulumi.runtime.registerResourceModule("azapi", "index/resource", _module)
pulumi.runtime.registerResourceModule("azapi", "index/resourceAction", _module)
pulumi.runtime.registerResourceModule("azapi", "index/updateResource", _module)
pulumi.runtime.registerResourcePackage("azapi", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:azapi") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
