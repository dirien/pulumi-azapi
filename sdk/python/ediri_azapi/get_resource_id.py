# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetResourceIdResult',
    'AwaitableGetResourceIdResult',
    'get_resource_id',
    'get_resource_id_output',
]

@pulumi.output_type
class GetResourceIdResult:
    """
    A collection of values returned by getResourceId.
    """
    def __init__(__self__, id=None, name=None, parent_id=None, parts=None, provider_namespace=None, resource_group_name=None, resource_id=None, subscription_id=None, type=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if parent_id and not isinstance(parent_id, str):
            raise TypeError("Expected argument 'parent_id' to be a str")
        pulumi.set(__self__, "parent_id", parent_id)
        if parts and not isinstance(parts, dict):
            raise TypeError("Expected argument 'parts' to be a dict")
        pulumi.set(__self__, "parts", parts)
        if provider_namespace and not isinstance(provider_namespace, str):
            raise TypeError("Expected argument 'provider_namespace' to be a str")
        pulumi.set(__self__, "provider_namespace", provider_namespace)
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        if resource_id and not isinstance(resource_id, str):
            raise TypeError("Expected argument 'resource_id' to be a str")
        pulumi.set(__self__, "resource_id", resource_id)
        if subscription_id and not isinstance(subscription_id, str):
            raise TypeError("Expected argument 'subscription_id' to be a str")
        pulumi.set(__self__, "subscription_id", subscription_id)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the azure resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="parentId")
    def parent_id(self) -> str:
        """
        The ID of the azure resource in which this resource is created.
        """
        return pulumi.get(self, "parent_id")

    @property
    @pulumi.getter
    def parts(self) -> Mapping[str, str]:
        """
        The map of the resource ID parts, where the key is the part name and the value is the part value. e.g. `virtualNetworks=myVnet`.
        """
        return pulumi.get(self, "parts")

    @property
    @pulumi.getter(name="providerNamespace")
    def provider_namespace(self) -> str:
        """
        The azure resource provider namespace of the azure resource.
        """
        return pulumi.get(self, "provider_namespace")

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        """
        The resource group name of the azure resource.
        """
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="subscriptionId")
    def subscription_id(self) -> str:
        """
        The subscription ID of the azure resource.
        """
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetResourceIdResult(GetResourceIdResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourceIdResult(
            id=self.id,
            name=self.name,
            parent_id=self.parent_id,
            parts=self.parts,
            provider_namespace=self.provider_namespace,
            resource_group_name=self.resource_group_name,
            resource_id=self.resource_id,
            subscription_id=self.subscription_id,
            type=self.type)


def get_resource_id(name: Optional[str] = None,
                    parent_id: Optional[str] = None,
                    resource_id: Optional[str] = None,
                    type: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourceIdResult:
    """
    This resource can parse an Azure resource ID into its separate fields.

    ## Example Usage


    :param str name: Specifies the name of the azure resource.
    :param str parent_id: The ID of the azure resource in which this resource is created. It supports different kinds of deployment scope for **top level** resources:
           - resource group scope: `parent_id` should be the ID of a resource group, it's recommended to manage a resource group by azurerm_resource_group.
           - management group scope: `parent_id` should be the ID of a management group, it's recommended to manage a management group by azurerm_management_group.
           - extension scope: `parent_id` should be the ID of the resource you're adding the extension to.
           - subscription scope: `parent_id` should be like `/subscriptions/00000000-0000-0000-0000-000000000000`
           - tenant scope: `parent_id` should be `/`
           
           For child level resources, the `parent_id` should be the ID of its parent resource, for example, subnet resource's `parent_id` is the ID of the vnet.
    :param str resource_id: The ID of an existing azure source.
           
           > **Note:** Configuring `name` and `parent_id` is an alternative way to configure `resource_id`.
    :param str type: It is in a format like `<resource-type>@<api-version>`. `<resource-type>` is the Azure resource type, for example, `Microsoft.Storage/storageAccounts`.
           `<api-version>` is version of the API used to manage this azure resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['parentId'] = parent_id
    __args__['resourceId'] = resource_id
    __args__['type'] = type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('azapi:index/getResourceId:getResourceId', __args__, opts=opts, typ=GetResourceIdResult).value

    return AwaitableGetResourceIdResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        parent_id=pulumi.get(__ret__, 'parent_id'),
        parts=pulumi.get(__ret__, 'parts'),
        provider_namespace=pulumi.get(__ret__, 'provider_namespace'),
        resource_group_name=pulumi.get(__ret__, 'resource_group_name'),
        resource_id=pulumi.get(__ret__, 'resource_id'),
        subscription_id=pulumi.get(__ret__, 'subscription_id'),
        type=pulumi.get(__ret__, 'type'))


@_utilities.lift_output_func(get_resource_id)
def get_resource_id_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                           parent_id: Optional[pulumi.Input[Optional[str]]] = None,
                           resource_id: Optional[pulumi.Input[Optional[str]]] = None,
                           type: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetResourceIdResult]:
    """
    This resource can parse an Azure resource ID into its separate fields.

    ## Example Usage


    :param str name: Specifies the name of the azure resource.
    :param str parent_id: The ID of the azure resource in which this resource is created. It supports different kinds of deployment scope for **top level** resources:
           - resource group scope: `parent_id` should be the ID of a resource group, it's recommended to manage a resource group by azurerm_resource_group.
           - management group scope: `parent_id` should be the ID of a management group, it's recommended to manage a management group by azurerm_management_group.
           - extension scope: `parent_id` should be the ID of the resource you're adding the extension to.
           - subscription scope: `parent_id` should be like `/subscriptions/00000000-0000-0000-0000-000000000000`
           - tenant scope: `parent_id` should be `/`
           
           For child level resources, the `parent_id` should be the ID of its parent resource, for example, subnet resource's `parent_id` is the ID of the vnet.
    :param str resource_id: The ID of an existing azure source.
           
           > **Note:** Configuring `name` and `parent_id` is an alternative way to configure `resource_id`.
    :param str type: It is in a format like `<resource-type>@<api-version>`. `<resource-type>` is the Azure resource type, for example, `Microsoft.Storage/storageAccounts`.
           `<api-version>` is version of the API used to manage this azure resource.
    """
    ...
