# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'Endpoint',
]

@pulumi.output_type
class Endpoint(dict):
    def __init__(__self__, *,
                 active_directory_authority_host: Optional[str] = None,
                 resource_manager_audience: Optional[str] = None,
                 resource_manager_endpoint: Optional[str] = None):
        """
        :param str active_directory_authority_host: The Active Directory login endpoint which should be used.
        :param str resource_manager_audience: The resource ID to obtain AD tokens for.
        :param str resource_manager_endpoint: The Resource Manager Endpoint which should be used.
        """
        if active_directory_authority_host is not None:
            pulumi.set(__self__, "active_directory_authority_host", active_directory_authority_host)
        if resource_manager_audience is not None:
            pulumi.set(__self__, "resource_manager_audience", resource_manager_audience)
        if resource_manager_endpoint is not None:
            pulumi.set(__self__, "resource_manager_endpoint", resource_manager_endpoint)

    @property
    @pulumi.getter(name="activeDirectoryAuthorityHost")
    def active_directory_authority_host(self) -> Optional[str]:
        """
        The Active Directory login endpoint which should be used.
        """
        return pulumi.get(self, "active_directory_authority_host")

    @property
    @pulumi.getter(name="resourceManagerAudience")
    def resource_manager_audience(self) -> Optional[str]:
        """
        The resource ID to obtain AD tokens for.
        """
        return pulumi.get(self, "resource_manager_audience")

    @property
    @pulumi.getter(name="resourceManagerEndpoint")
    def resource_manager_endpoint(self) -> Optional[str]:
        """
        The Resource Manager Endpoint which should be used.
        """
        return pulumi.get(self, "resource_manager_endpoint")


