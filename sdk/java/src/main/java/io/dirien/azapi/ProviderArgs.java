// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package io.dirien.azapi;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProviderArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProviderArgs Empty = new ProviderArgs();

    /**
     * The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
     * Certificate
     * 
     */
    @Import(name="clientCertificatePassword")
    private @Nullable Output<String> clientCertificatePassword;

    /**
     * @return The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
     * Certificate
     * 
     */
    public Optional<Output<String>> clientCertificatePassword() {
        return Optional.ofNullable(this.clientCertificatePassword);
    }

    /**
     * The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
     * Principal using a Client Certificate.
     * 
     */
    @Import(name="clientCertificatePath")
    private @Nullable Output<String> clientCertificatePath;

    /**
     * @return The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
     * Principal using a Client Certificate.
     * 
     */
    public Optional<Output<String>> clientCertificatePath() {
        return Optional.ofNullable(this.clientCertificatePath);
    }

    /**
     * The Client ID which should be used.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return The Client ID which should be used.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
     * 
     */
    @Import(name="clientSecret")
    private @Nullable Output<String> clientSecret;

    /**
     * @return The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
     * 
     */
    public Optional<Output<String>> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    @Import(name="defaultLocation")
    private @Nullable Output<String> defaultLocation;

    public Optional<Output<String>> defaultLocation() {
        return Optional.ofNullable(this.defaultLocation);
    }

    @Import(name="defaultTags", json=true)
    private @Nullable Output<Map<String,String>> defaultTags;

    public Optional<Output<Map<String,String>>> defaultTags() {
        return Optional.ofNullable(this.defaultTags);
    }

    /**
     * This will disable the x-ms-correlation-request-id header.
     * 
     */
    @Import(name="disableCorrelationRequestId", json=true)
    private @Nullable Output<Boolean> disableCorrelationRequestId;

    /**
     * @return This will disable the x-ms-correlation-request-id header.
     * 
     */
    public Optional<Output<Boolean>> disableCorrelationRequestId() {
        return Optional.ofNullable(this.disableCorrelationRequestId);
    }

    /**
     * This will disable the Terraform Partner ID which is used if a custom `partner_id` isn&#39;t specified.
     * 
     */
    @Import(name="disableTerraformPartnerId", json=true)
    private @Nullable Output<Boolean> disableTerraformPartnerId;

    /**
     * @return This will disable the Terraform Partner ID which is used if a custom `partner_id` isn&#39;t specified.
     * 
     */
    public Optional<Output<Boolean>> disableTerraformPartnerId() {
        return Optional.ofNullable(this.disableTerraformPartnerId);
    }

    /**
     * The Cloud Environment which should be used. Possible values are public, usgovernment and china. Defaults to public.
     * 
     */
    @Import(name="environment", required=true)
    private Output<String> environment;

    /**
     * @return The Cloud Environment which should be used. Possible values are public, usgovernment and china. Defaults to public.
     * 
     */
    public Output<String> environment() {
        return this.environment;
    }

    /**
     * The bearer token for the request to the OIDC provider. For use When authenticating as a Service Principal using OpenID
     * Connect.
     * 
     */
    @Import(name="oidcRequestToken")
    private @Nullable Output<String> oidcRequestToken;

    /**
     * @return The bearer token for the request to the OIDC provider. For use When authenticating as a Service Principal using OpenID
     * Connect.
     * 
     */
    public Optional<Output<String>> oidcRequestToken() {
        return Optional.ofNullable(this.oidcRequestToken);
    }

    /**
     * The URL for the OIDC provider from which to request an ID token. For use When authenticating as a Service Principal
     * using OpenID Connect.
     * 
     */
    @Import(name="oidcRequestUrl")
    private @Nullable Output<String> oidcRequestUrl;

    /**
     * @return The URL for the OIDC provider from which to request an ID token. For use When authenticating as a Service Principal
     * using OpenID Connect.
     * 
     */
    public Optional<Output<String>> oidcRequestUrl() {
        return Optional.ofNullable(this.oidcRequestUrl);
    }

    /**
     * The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
     * 
     */
    @Import(name="oidcToken")
    private @Nullable Output<String> oidcToken;

    /**
     * @return The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
     * 
     */
    public Optional<Output<String>> oidcToken() {
        return Optional.ofNullable(this.oidcToken);
    }

    /**
     * The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
     * 
     */
    @Import(name="oidcTokenFilePath")
    private @Nullable Output<String> oidcTokenFilePath;

    /**
     * @return The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
     * 
     */
    public Optional<Output<String>> oidcTokenFilePath() {
        return Optional.ofNullable(this.oidcTokenFilePath);
    }

    /**
     * A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
     * 
     */
    @Import(name="partnerId")
    private @Nullable Output<String> partnerId;

    /**
     * @return A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
     * 
     */
    public Optional<Output<String>> partnerId() {
        return Optional.ofNullable(this.partnerId);
    }

    /**
     * Should the Provider skip registering all of the Resource Providers that it supports, if they&#39;re not already registered?
     * 
     */
    @Import(name="skipProviderRegistration", json=true)
    private @Nullable Output<Boolean> skipProviderRegistration;

    /**
     * @return Should the Provider skip registering all of the Resource Providers that it supports, if they&#39;re not already registered?
     * 
     */
    public Optional<Output<Boolean>> skipProviderRegistration() {
        return Optional.ofNullable(this.skipProviderRegistration);
    }

    /**
     * The Subscription ID which should be used.
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<String> subscriptionId;

    /**
     * @return The Subscription ID which should be used.
     * 
     */
    public Optional<Output<String>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * The Tenant ID which should be used.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return The Tenant ID which should be used.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    /**
     * Allow OpenID Connect to be used for authentication
     * 
     */
    @Import(name="useOidc", json=true)
    private @Nullable Output<Boolean> useOidc;

    /**
     * @return Allow OpenID Connect to be used for authentication
     * 
     */
    public Optional<Output<Boolean>> useOidc() {
        return Optional.ofNullable(this.useOidc);
    }

    private ProviderArgs() {}

    private ProviderArgs(ProviderArgs $) {
        this.clientCertificatePassword = $.clientCertificatePassword;
        this.clientCertificatePath = $.clientCertificatePath;
        this.clientId = $.clientId;
        this.clientSecret = $.clientSecret;
        this.defaultLocation = $.defaultLocation;
        this.defaultTags = $.defaultTags;
        this.disableCorrelationRequestId = $.disableCorrelationRequestId;
        this.disableTerraformPartnerId = $.disableTerraformPartnerId;
        this.environment = $.environment;
        this.oidcRequestToken = $.oidcRequestToken;
        this.oidcRequestUrl = $.oidcRequestUrl;
        this.oidcToken = $.oidcToken;
        this.oidcTokenFilePath = $.oidcTokenFilePath;
        this.partnerId = $.partnerId;
        this.skipProviderRegistration = $.skipProviderRegistration;
        this.subscriptionId = $.subscriptionId;
        this.tenantId = $.tenantId;
        this.useOidc = $.useOidc;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProviderArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProviderArgs $;

        public Builder() {
            $ = new ProviderArgs();
        }

        public Builder(ProviderArgs defaults) {
            $ = new ProviderArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clientCertificatePassword The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
         * Certificate
         * 
         * @return builder
         * 
         */
        public Builder clientCertificatePassword(@Nullable Output<String> clientCertificatePassword) {
            $.clientCertificatePassword = clientCertificatePassword;
            return this;
        }

        /**
         * @param clientCertificatePassword The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
         * Certificate
         * 
         * @return builder
         * 
         */
        public Builder clientCertificatePassword(String clientCertificatePassword) {
            return clientCertificatePassword(Output.of(clientCertificatePassword));
        }

        /**
         * @param clientCertificatePath The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
         * Principal using a Client Certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificatePath(@Nullable Output<String> clientCertificatePath) {
            $.clientCertificatePath = clientCertificatePath;
            return this;
        }

        /**
         * @param clientCertificatePath The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
         * Principal using a Client Certificate.
         * 
         * @return builder
         * 
         */
        public Builder clientCertificatePath(String clientCertificatePath) {
            return clientCertificatePath(Output.of(clientCertificatePath));
        }

        /**
         * @param clientId The Client ID which should be used.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId The Client ID which should be used.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param clientSecret The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(@Nullable Output<String> clientSecret) {
            $.clientSecret = clientSecret;
            return this;
        }

        /**
         * @param clientSecret The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
         * 
         * @return builder
         * 
         */
        public Builder clientSecret(String clientSecret) {
            return clientSecret(Output.of(clientSecret));
        }

        public Builder defaultLocation(@Nullable Output<String> defaultLocation) {
            $.defaultLocation = defaultLocation;
            return this;
        }

        public Builder defaultLocation(String defaultLocation) {
            return defaultLocation(Output.of(defaultLocation));
        }

        public Builder defaultTags(@Nullable Output<Map<String,String>> defaultTags) {
            $.defaultTags = defaultTags;
            return this;
        }

        public Builder defaultTags(Map<String,String> defaultTags) {
            return defaultTags(Output.of(defaultTags));
        }

        /**
         * @param disableCorrelationRequestId This will disable the x-ms-correlation-request-id header.
         * 
         * @return builder
         * 
         */
        public Builder disableCorrelationRequestId(@Nullable Output<Boolean> disableCorrelationRequestId) {
            $.disableCorrelationRequestId = disableCorrelationRequestId;
            return this;
        }

        /**
         * @param disableCorrelationRequestId This will disable the x-ms-correlation-request-id header.
         * 
         * @return builder
         * 
         */
        public Builder disableCorrelationRequestId(Boolean disableCorrelationRequestId) {
            return disableCorrelationRequestId(Output.of(disableCorrelationRequestId));
        }

        /**
         * @param disableTerraformPartnerId This will disable the Terraform Partner ID which is used if a custom `partner_id` isn&#39;t specified.
         * 
         * @return builder
         * 
         */
        public Builder disableTerraformPartnerId(@Nullable Output<Boolean> disableTerraformPartnerId) {
            $.disableTerraformPartnerId = disableTerraformPartnerId;
            return this;
        }

        /**
         * @param disableTerraformPartnerId This will disable the Terraform Partner ID which is used if a custom `partner_id` isn&#39;t specified.
         * 
         * @return builder
         * 
         */
        public Builder disableTerraformPartnerId(Boolean disableTerraformPartnerId) {
            return disableTerraformPartnerId(Output.of(disableTerraformPartnerId));
        }

        /**
         * @param environment The Cloud Environment which should be used. Possible values are public, usgovernment and china. Defaults to public.
         * 
         * @return builder
         * 
         */
        public Builder environment(Output<String> environment) {
            $.environment = environment;
            return this;
        }

        /**
         * @param environment The Cloud Environment which should be used. Possible values are public, usgovernment and china. Defaults to public.
         * 
         * @return builder
         * 
         */
        public Builder environment(String environment) {
            return environment(Output.of(environment));
        }

        /**
         * @param oidcRequestToken The bearer token for the request to the OIDC provider. For use When authenticating as a Service Principal using OpenID
         * Connect.
         * 
         * @return builder
         * 
         */
        public Builder oidcRequestToken(@Nullable Output<String> oidcRequestToken) {
            $.oidcRequestToken = oidcRequestToken;
            return this;
        }

        /**
         * @param oidcRequestToken The bearer token for the request to the OIDC provider. For use When authenticating as a Service Principal using OpenID
         * Connect.
         * 
         * @return builder
         * 
         */
        public Builder oidcRequestToken(String oidcRequestToken) {
            return oidcRequestToken(Output.of(oidcRequestToken));
        }

        /**
         * @param oidcRequestUrl The URL for the OIDC provider from which to request an ID token. For use When authenticating as a Service Principal
         * using OpenID Connect.
         * 
         * @return builder
         * 
         */
        public Builder oidcRequestUrl(@Nullable Output<String> oidcRequestUrl) {
            $.oidcRequestUrl = oidcRequestUrl;
            return this;
        }

        /**
         * @param oidcRequestUrl The URL for the OIDC provider from which to request an ID token. For use When authenticating as a Service Principal
         * using OpenID Connect.
         * 
         * @return builder
         * 
         */
        public Builder oidcRequestUrl(String oidcRequestUrl) {
            return oidcRequestUrl(Output.of(oidcRequestUrl));
        }

        /**
         * @param oidcToken The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
         * 
         * @return builder
         * 
         */
        public Builder oidcToken(@Nullable Output<String> oidcToken) {
            $.oidcToken = oidcToken;
            return this;
        }

        /**
         * @param oidcToken The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
         * 
         * @return builder
         * 
         */
        public Builder oidcToken(String oidcToken) {
            return oidcToken(Output.of(oidcToken));
        }

        /**
         * @param oidcTokenFilePath The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
         * 
         * @return builder
         * 
         */
        public Builder oidcTokenFilePath(@Nullable Output<String> oidcTokenFilePath) {
            $.oidcTokenFilePath = oidcTokenFilePath;
            return this;
        }

        /**
         * @param oidcTokenFilePath The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
         * 
         * @return builder
         * 
         */
        public Builder oidcTokenFilePath(String oidcTokenFilePath) {
            return oidcTokenFilePath(Output.of(oidcTokenFilePath));
        }

        /**
         * @param partnerId A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
         * 
         * @return builder
         * 
         */
        public Builder partnerId(@Nullable Output<String> partnerId) {
            $.partnerId = partnerId;
            return this;
        }

        /**
         * @param partnerId A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
         * 
         * @return builder
         * 
         */
        public Builder partnerId(String partnerId) {
            return partnerId(Output.of(partnerId));
        }

        /**
         * @param skipProviderRegistration Should the Provider skip registering all of the Resource Providers that it supports, if they&#39;re not already registered?
         * 
         * @return builder
         * 
         */
        public Builder skipProviderRegistration(@Nullable Output<Boolean> skipProviderRegistration) {
            $.skipProviderRegistration = skipProviderRegistration;
            return this;
        }

        /**
         * @param skipProviderRegistration Should the Provider skip registering all of the Resource Providers that it supports, if they&#39;re not already registered?
         * 
         * @return builder
         * 
         */
        public Builder skipProviderRegistration(Boolean skipProviderRegistration) {
            return skipProviderRegistration(Output.of(skipProviderRegistration));
        }

        /**
         * @param subscriptionId The Subscription ID which should be used.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<String> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId The Subscription ID which should be used.
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(String subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param tenantId The Tenant ID which should be used.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId The Tenant ID which should be used.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        /**
         * @param useOidc Allow OpenID Connect to be used for authentication
         * 
         * @return builder
         * 
         */
        public Builder useOidc(@Nullable Output<Boolean> useOidc) {
            $.useOidc = useOidc;
            return this;
        }

        /**
         * @param useOidc Allow OpenID Connect to be used for authentication
         * 
         * @return builder
         * 
         */
        public Builder useOidc(Boolean useOidc) {
            return useOidc(Output.of(useOidc));
        }

        public ProviderArgs build() {
            $.environment = Objects.requireNonNull($.environment, "expected parameter 'environment' to be non-null");
            return $;
        }
    }

}
