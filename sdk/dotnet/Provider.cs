// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ediri.Azapi
{
    /// <summary>
    /// The provider type for the azapi package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [AzapiResourceType("pulumi:providers:azapi")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
        /// Certificate
        /// </summary>
        [Output("clientCertificatePassword")]
        public Output<string?> ClientCertificatePassword { get; private set; } = null!;

        /// <summary>
        /// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
        /// Principal using a Client Certificate.
        /// </summary>
        [Output("clientCertificatePath")]
        public Output<string?> ClientCertificatePath { get; private set; } = null!;

        /// <summary>
        /// The Client ID which should be used.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
        /// </summary>
        [Output("clientSecret")]
        public Output<string?> ClientSecret { get; private set; } = null!;

        /// <summary>
        /// The value of the x-ms-correlation-request-id header (otherwise an auto-generated UUID will be used).
        /// </summary>
        [Output("customCorrelationRequestId")]
        public Output<string?> CustomCorrelationRequestId { get; private set; } = null!;

        [Output("defaultLocation")]
        public Output<string?> DefaultLocation { get; private set; } = null!;

        [Output("defaultName")]
        public Output<string?> DefaultName { get; private set; } = null!;

        [Output("defaultNamingPrefix")]
        public Output<string?> DefaultNamingPrefix { get; private set; } = null!;

        [Output("defaultNamingSuffix")]
        public Output<string?> DefaultNamingSuffix { get; private set; } = null!;

        /// <summary>
        /// The Cloud Environment which should be used. Possible values are public, usgovernment and china. Defaults to public.
        /// </summary>
        [Output("environment")]
        public Output<string> Environment { get; private set; } = null!;

        /// <summary>
        /// The bearer token for the request to the OIDC provider. For use When authenticating as a Service Principal using OpenID
        /// Connect.
        /// </summary>
        [Output("oidcRequestToken")]
        public Output<string?> OidcRequestToken { get; private set; } = null!;

        /// <summary>
        /// The URL for the OIDC provider from which to request an ID token. For use When authenticating as a Service Principal
        /// using OpenID Connect.
        /// </summary>
        [Output("oidcRequestUrl")]
        public Output<string?> OidcRequestUrl { get; private set; } = null!;

        /// <summary>
        /// The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
        /// </summary>
        [Output("oidcToken")]
        public Output<string?> OidcToken { get; private set; } = null!;

        /// <summary>
        /// The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
        /// </summary>
        [Output("oidcTokenFilePath")]
        public Output<string?> OidcTokenFilePath { get; private set; } = null!;

        /// <summary>
        /// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
        /// </summary>
        [Output("partnerId")]
        public Output<string?> PartnerId { get; private set; } = null!;

        /// <summary>
        /// The Subscription ID which should be used.
        /// </summary>
        [Output("subscriptionId")]
        public Output<string?> SubscriptionId { get; private set; } = null!;

        /// <summary>
        /// The Tenant ID which should be used.
        /// </summary>
        [Output("tenantId")]
        public Output<string?> TenantId { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs args, CustomResourceOptions? options = null)
            : base("azapi", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/dirien/pulumi-azapi",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("auxiliaryTenantIds", json: true)]
        private InputList<string>? _auxiliaryTenantIds;
        public InputList<string> AuxiliaryTenantIds
        {
            get => _auxiliaryTenantIds ?? (_auxiliaryTenantIds = new InputList<string>());
            set => _auxiliaryTenantIds = value;
        }

        /// <summary>
        /// The password associated with the Client Certificate. For use when authenticating as a Service Principal using a Client
        /// Certificate
        /// </summary>
        [Input("clientCertificatePassword")]
        public Input<string>? ClientCertificatePassword { get; set; }

        /// <summary>
        /// The path to the Client Certificate associated with the Service Principal for use when authenticating as a Service
        /// Principal using a Client Certificate.
        /// </summary>
        [Input("clientCertificatePath")]
        public Input<string>? ClientCertificatePath { get; set; }

        /// <summary>
        /// The Client ID which should be used.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// The Client Secret which should be used. For use When authenticating as a Service Principal using a Client Secret.
        /// </summary>
        [Input("clientSecret")]
        public Input<string>? ClientSecret { get; set; }

        /// <summary>
        /// The value of the x-ms-correlation-request-id header (otherwise an auto-generated UUID will be used).
        /// </summary>
        [Input("customCorrelationRequestId")]
        public Input<string>? CustomCorrelationRequestId { get; set; }

        [Input("defaultLocation")]
        public Input<string>? DefaultLocation { get; set; }

        [Input("defaultName")]
        public Input<string>? DefaultName { get; set; }

        [Input("defaultNamingPrefix")]
        public Input<string>? DefaultNamingPrefix { get; set; }

        [Input("defaultNamingSuffix")]
        public Input<string>? DefaultNamingSuffix { get; set; }

        [Input("defaultTags", json: true)]
        private InputMap<string>? _defaultTags;
        public InputMap<string> DefaultTags
        {
            get => _defaultTags ?? (_defaultTags = new InputMap<string>());
            set => _defaultTags = value;
        }

        /// <summary>
        /// This will disable the x-ms-correlation-request-id header.
        /// </summary>
        [Input("disableCorrelationRequestId", json: true)]
        public Input<bool>? DisableCorrelationRequestId { get; set; }

        [Input("disableTerraformPartnerId", json: true)]
        public Input<bool>? DisableTerraformPartnerId { get; set; }

        [Input("endpoint", json: true)]
        public Input<Inputs.ProviderEndpointArgs>? Endpoint { get; set; }

        /// <summary>
        /// The Cloud Environment which should be used. Possible values are public, usgovernment and china. Defaults to public.
        /// </summary>
        [Input("environment", required: true)]
        public Input<string> Environment { get; set; } = null!;

        /// <summary>
        /// The bearer token for the request to the OIDC provider. For use When authenticating as a Service Principal using OpenID
        /// Connect.
        /// </summary>
        [Input("oidcRequestToken")]
        public Input<string>? OidcRequestToken { get; set; }

        /// <summary>
        /// The URL for the OIDC provider from which to request an ID token. For use When authenticating as a Service Principal
        /// using OpenID Connect.
        /// </summary>
        [Input("oidcRequestUrl")]
        public Input<string>? OidcRequestUrl { get; set; }

        /// <summary>
        /// The OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
        /// </summary>
        [Input("oidcToken")]
        public Input<string>? OidcToken { get; set; }

        /// <summary>
        /// The path to a file containing an OIDC ID token for use when authenticating as a Service Principal using OpenID Connect.
        /// </summary>
        [Input("oidcTokenFilePath")]
        public Input<string>? OidcTokenFilePath { get; set; }

        /// <summary>
        /// A GUID/UUID that is registered with Microsoft to facilitate partner resource usage attribution.
        /// </summary>
        [Input("partnerId")]
        public Input<string>? PartnerId { get; set; }

        /// <summary>
        /// Should the Provider skip registering all of the Resource Providers that it supports, if they're not already registered?
        /// </summary>
        [Input("skipProviderRegistration", json: true)]
        public Input<bool>? SkipProviderRegistration { get; set; }

        /// <summary>
        /// The Subscription ID which should be used.
        /// </summary>
        [Input("subscriptionId")]
        public Input<string>? SubscriptionId { get; set; }

        /// <summary>
        /// The Tenant ID which should be used.
        /// </summary>
        [Input("tenantId")]
        public Input<string>? TenantId { get; set; }

        /// <summary>
        /// Allow Azure CLI to be used for Authentication.
        /// </summary>
        [Input("useCli", json: true)]
        public Input<bool>? UseCli { get; set; }

        /// <summary>
        /// Allow Managed Service Identity to be used for Authentication.
        /// </summary>
        [Input("useMsi", json: true)]
        public Input<bool>? UseMsi { get; set; }

        /// <summary>
        /// Allow OpenID Connect to be used for authentication
        /// </summary>
        [Input("useOidc", json: true)]
        public Input<bool>? UseOidc { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }
}
